<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yuri Ardila]]></title>
  <link href="http://ardiyu07.github.io/atom.xml" rel="self"/>
  <link href="http://ardiyu07.github.io/"/>
  <updated>2014-02-13T23:07:51-08:00</updated>
  <id>http://ardiyu07.github.io/</id>
  <author>
    <name><![CDATA[Yuri Ardila]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[高速化手法: ループ展開]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/13/jp-parallelizing-technique-simple-loop-unrolling/"/>
    <updated>2014-02-13T01:09:00-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/13/jp-parallelizing-technique-simple-loop-unrolling</id>
    <content type="html"><![CDATA[<p>ループ展開（英：Loop Unrolling/Loop Unwinding）は、高速化の基本でもあり、効果が高い時は少なくないです。
Wikipediaによると、</p>

<blockquote><p>ループ展開の目的は、毎回の繰り返しごとに発生する「ループの終了」条件のテストを減少させる（もしくはなくす）事によって、実行速度を向上させることである。ループは、ループ自体を制御するためのオーバーヘッドがなくなるように、独立した命令ブロックの連続に書き換えることができる。</p><footer><strong>Wikipedia</strong> <cite><a href='http://ja.wikipedia.org/wiki/%E3%83%AB%E3%83%BC%E3%83%97%E5%B1%95%E9%96%8B'>ループ展開</a></cite></footer></blockquote>




<!--more-->


<p>したがって、シリアルプロセッサでも、ループ展開によってプログラムの実行時間を減らすことができます。
最近、大体のプロセッサはパイプライン化が可能なので、ループ展開によってデータ読み書きのレイテンシー
を減らすことにもつながります。つまり、ループ展開は<a href="http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3">（ソフトウェア）パイプライン</a>を促します。</p>

<p>サンプルコード:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N_DATA</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>サンプルコードにループ展開をあてると:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N_DATA</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>2つ以上のプロセッサが備わっているデバイス（並列プロセッサ）には、ループ内の各イテレーションを
各プロセッサにあてることで、同時実行可能になり、実行時間をより低くすることができます。</p>

<p>しかし、並列実行可能な環境に、ループを展開してワークロードを分割する時に、一つ注意点を頭に入れなければ
ならないことがあります。それは、<a href="http://wwweic.eri.u-tokyo.ac.jp/computer/manual/altix/compile/CC/Intel_Cdoc91/main_cls/mergedProjects/optaps_cls/common/optaps_vec_dtdp.htm">データ依存性</a>のことです。間違ってループ展開をしてしまうと、不正解の実行結果に導かれたり、
最大限の高速化を得られず、だったりします。
ここではサンプルコードにはデータ依存性がないので、後々時間があればデータ依存性について書きます。</p>

<p>OpenMP実装:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#pragma omp parallel for</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N_DATA</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CUDA実装:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cuda'><span class='line'><span class="kr">__global__</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">saxpy</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">float</span> <span class="n">alpha</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="nb">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="nb">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="nb">blockIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>     <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OpenCL実装:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">__kernel</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">saxpy</span><span class="p">(</span><span class="n">__global</span> <span class="kt">float</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">__global</span> <span class="kt">float</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="n">__global</span> <span class="kt">float</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">float</span> <span class="n">alpha</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">get_global_id</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>     <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parallelizing Technique: Loop Unrolling]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/13/en-parallelizing-technique-simple-loop-unrolling/"/>
    <updated>2014-02-13T01:09:00-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/13/en-parallelizing-technique-simple-loop-unrolling</id>
    <content type="html"><![CDATA[<p>Loop unrolling, or can also be called <a href="http://en.wikipedia.org/wiki/Loop_unwinding">loop unwinding</a>,
is the most fundamental technique in the parallel programming world, and it is also powerful.
The idea is to break down a loop into a sequence of identical operations,
and attach the data index pointer accordingly.</p>

<!--more-->


<p>On a serial processor, loop unrolling can fasten the execution because it
reduces the loop control instructions, such as pointer arithmetic and branching
instructions. In most cases, this type of <a href="http://en.wikipedia.org/wiki/Software_pipelining">software pipelining</a>
can also induce the advantage of pipeline-enabled processors, which is to hide
the latency of data read-write.</p>

<p>Sample snippet:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N_DATA</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Loop unrolling appliance:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N_DATA</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>On a device where more than one processor can execute the same instruction (i.e. parallel processors),
each iteration in a loop is given to a single processor, and the next iteration is then enqueued.</p>

<p>The most important thing to note when dividing the workload to each thread, is the most infamous
<a href="http://en.wikipedia.org/wiki/Data_dependency">data dependency</a>. If you are not conscientious enough
when resolving this problem, it may lead to a wrong execution result, or slow execution speed.
In this article, iteration in the sample snippet does not have any data dependency to the previous execution,
so I will keep this topic for later.</p>

<p>OpenMP Implementation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#pragma omp parallel for</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N_DATA</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>CUDA implementation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='cuda'><span class='line'><span class="kr">__global__</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">saxpy</span><span class="p">(</span><span class="kt">float</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">float</span> <span class="n">alpha</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="nb">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="nb">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="nb">blockIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>     <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>OpenCL implementation:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">__kernel</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">saxpy</span><span class="p">(</span><span class="n">__global</span> <span class="kt">float</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="n">__global</span> <span class="kt">float</span> <span class="o">*</span><span class="n">b</span><span class="p">,</span> <span class="n">__global</span> <span class="kt">float</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">float</span> <span class="n">alpha</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>     <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">get_global_id</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>     <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacsとe2wmでプログラムをもっと楽しく書ける！]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/05/jp-coding-with-emacs-and-e2wm-brilliant/"/>
    <updated>2014-02-05T00:00:00-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/05/jp-coding-with-emacs-and-e2wm-brilliant</id>
    <content type="html"><![CDATA[<p>5年前初めてプログラムを書きました。初めて書いたプログラムは、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include {stdio.h}</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello World!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure>


<p>でした。
（昔はHTMLとCSSをNotepadで書いた覚えがあるけど、こいつらはプログラミング言語じゃないよね。。）</p>

<p>その時からずっと、<a href="en.wikipedia.org/wiki/Emacs">Emacs</a>を
使ってきました。<a href="en.wikipedia.org/wiki/Vi">Vi</a>とか、
<a href="en.wikipedia.org/wiki/Nano">Nano</a>とか、その他の<a href="http://en.wikipedia.org/wiki/Source_code_editor">IDE editor</a>
には<strong>絶対</strong>移りません。
大きな理由としては（宗教上の問題もあって）、小指はキーボードに手を置いた瞬間、自動的にCtrlキーに
移動するのです。（昔<a href="http://blog.counter-strike.net/">Counter Strike</a>）をずっとやってて、<code>小指はCtrl</code>
という癖は今までも消せない）</p>

<br/>


<br/>


<p><img class="center" src="http://www.theinternetpatrol.com/the-argument-ginger-maryann-emacs-vi-20090825-125314.jpg" title="" ></p>

<p class="fig-title"></p>


<p style="text-align:center;">Emacs vs Vi, 引用: <a href="http://www.theinternetpatrol.com/">The Internet Patrol</a></p>

<!--more-->


<p><strong>関連するディスカッション</strong>: <a href="http://stackoverflow.com/questions/136056/ide-or-text-editor">IDE or Text Editor?</a></p>

<p>「Emacsを使う時は、プロジェクトの管理はやりにくい！」</p>

<p>という声はいっぱいあがるでしょう。</p>

<p>他のファイルを探すたんびに他のウィンドウを開けて、grepを実行して、そしてコンパイルをしたくて、
また他のウィンドウを開けて、コンパイルコマンドを呼び出して。。
こういう面倒な作業は、.emacsをいじってEmacs内で効率よくするために
関数を作ったりするのが一般的だと思います。</p>

<p>「そのための時間もない。。」</p>

<p>と僕も思ったので、このツールを見つけました。Emacs内で動くプロジェクト管理ツールです。
その名は、<a href="https://github.com/kiwanami/Emacs-window-manager">e2wm</a>。
Equilibrium Emacs Window Managerの略。</p>

<p>基本的には、5種類の開発モードが最初から定義されています:
<code>Code</code>、<code>Two</code>、<code>Doc</code>、<code>Dashboard</code>、と<code>Array</code>。それぞれのモードに異なるEmacsのプラグインが
ついています。例えばCodeモードだと<a href="www.emacswiki.org/Emacs/ImenuMode">imenu</a>と<a href="http://www.gnu.org/software/Emacs/manual/html_node/Emacs/List-Buffers.html">bufferlist</a>、
Arrayモードだと<a href="http://www.emacswiki.org/emacs/EmacsDoctor">doctor</a>。</p>

<p><img class="center" src="http://ardiyu07.github.io/images/dp-code.png" width="480" height="288" title="'Code mode'" ></p>

<p class="fig-title">e2wm: Codeモード</p>


<br/>


<p><img class="center" src="http://ardiyu07.github.io/images/dp-two.png" width="480" height="288" title="'Two mode'" ></p>

<p class="fig-title">e2wm: Twoモード</p>


<br/>


<p><img class="center" src="http://ardiyu07.github.io/images/dp-code-with-shell.png" width="480" height="288" title="'Code mode with shell window'" ></p>

<p class="fig-title">e2wm: Codeモード内でシェルウィンドウを開ける</p>


<br/>


<p>e2wmを使うには、Super簡単です。こちらのファイルをダウンロード：
* <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm-config.el">e2wm-config.el</a>
* <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm-vcs.el">e2wm-vcs.el</a>
* <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm.el">e2wm.el</a></p>

<p>そして、Emacsのパス(~/.emacs.d/)に上記のファイルを入れる。</p>

<p>最後に、<code>.emacs</code>に、以下のコードを挿入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;e2wm</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-+&quot;</span><span class="p">)</span> <span class="ss">&#39;e2wm:start-management</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>完了！</p>

<p>e2wmを使うには、Emacsを開いたあとに,<code>C-+</code>で起動できます。</p>

<p>e2wmのgithubのプロジェクトは<a href="https://github.com/kiwanami/Emacs-window-manager">こちら</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding dengan Emacs and e2wm: Windows Manager yang tepat untuk Emacs]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/05/id-coding-with-emacs-and-e2wm-brilliant/"/>
    <updated>2014-02-05T00:00:00-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/05/id-coding-with-emacs-and-e2wm-brilliant</id>
    <content type="html"><![CDATA[<p>Dari saya mulai bikin program (dengan C language) 5 tahun yang lalu, saya selalu menggunakan <a href="en.wikipedia.org/wiki/Emacs">Emacs</a>.
(Sebenernya sebelum itu pernah nulis dengan HTML dan CSS, tapi kayaknya ini bukan programming language :grin:)
Saya gak berniat untuk pindah ke <a href="en.wikipedia.org/wiki/Vi">Vi</a>, <a href="en.wikipedia.org/wiki/Nano">Nano</a>,
apalagi <a href="http://en.wikipedia.org/wiki/Source_code_editor">IDE editor</a>.
Karena otomatis jari kelingking pasti ke tombol <code>Ctrl</code>.. dan Editor IDE terlalu bikin pusing untuk belajar cara pakenya untuk
mendapatkan performance yang maksimal..
(Dan dulu main CS juga hampir setiap hari, jadi ya memang kelingking udah gak terpisahkan sama <code>Ctrl</code>)</p>

<br/>


<br/>


<p><img class="center" src="http://www.theinternetpatrol.com/the-argument-ginger-maryann-emacs-vi-20090825-125314.jpg" title="" ></p>

<p class="fig-title"></p>


<p style="text-align:center;">Emacs vs Vi, Source: <a href="http://www.theinternetpatrol.com/">The Internet Patrol</a></p>

<!--more-->


<p><strong>Diskusi yang sama</strong>: <a href="http://stackoverflow.com/questions/136056/ide-or-text-editor">IDE or Text Editor?</a></p>

<p>Sewaktu memakai Emacs, pasti semua setuju kalo Emacs out-of-the-box itu kurang dilengkapi sama
tools untuk project management. Untuk mencari file di folder lain, ada waktunya kita buka window
baru, <code>find</code> atau <code>grep</code> yang diinginkan, terus balik lagi ke Emacs. Atau setelah selesai menulis
program, buka window baru, terus invoke compiler disitu. Disaat seperti ini, yang biasanya dilakukan
adalah mendefine fungsi untuk mempermudah proses diatas ke <code>.emacs</code>. Lagi-lagi waktu terbuang sia-sia..</p>

<p>Untuk menyelesaikan permasalahan project manager di Emacs, <a href="https://github.com/kiwanami/Emacs-window-manager">e2wm</a>
jawabannya.</p>

<p>Ada 5 jenis mode yang bisa digunakan dengan e2wm: <code>Code</code>, <code>Two</code>, <code>Doc</code>, <code>Dashboard</code>, dan <code>Array</code>,
dimana setiap mode mempunyai karakteristik sendiri dengan dilengkapi oleh plugin Emacs yang berbeda-beda.
Contohnya ada <a href="www.emacswiki.org/Emacs/ImenuMode">imenu</a>,
atau <a href="http://www.gnu.org/software/Emacs/manual/html_node/Emacs/List-Buffers.html">bufferlist</a>.</p>

<p><img class="center" src="http://ardiyu07.github.io/images/dp-code.png" width="480" height="288" title="'Code mode'" ></p>

<p class="fig-title">e2wm: code mode</p>


<br/>


<p><img class="center" src="http://ardiyu07.github.io/images/dp-two.png" width="480" height="288" title="'Two mode'" ></p>

<p class="fig-title">e2wm: two mode</p>


<br/>


<p><img class="center" src="http://ardiyu07.github.io/images/dp-code-with-shell.png" width="480" height="288" title="'Code mode with shell window'" ></p>

<p class="fig-title">e2wm: code mode with shell window</p>


<br/>


<p>Untuk menggunakan e2wm, sangat simple, yang harus dilakukan adalah download file-file dibawah:
* <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm-config.el">e2wm-config.el</a>
* <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm-vcs.el">e2wm-vcs.el</a>
* <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm.el">e2wm.el</a>
terus file-file ini ditaro di path Emacs (biasanya <code>~/.emacs.d/</code>), terus masukkin:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;e2wm</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-+&quot;</span><span class="p">)</span> <span class="ss">&#39;e2wm:start-management</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>ke file <code>.emacs</code>.</p>

<p>Untuk memulai penggunaan e2wm, tekan <code>C-+</code>, done!</p>

<p>Github project untuk e2wm ada <a href="https://github.com/kiwanami/Emacs-window-manager">disini</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Coding with Emacs and e2wm, a brilliant Emacs windows manager]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/05/en-coding-with-emacs-and-e2wm-brilliant/"/>
    <updated>2014-02-05T00:00:00-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/05/en-coding-with-emacs-and-e2wm-brilliant</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been using <a href="en.wikipedia.org/wiki/Emacs">Emacs</a> since I started writing my first program 5 years ago
(well, actually I wrote HTML and CSS long before that, but that doesn&rsquo;t count, right?).
I never intend to move on to <a href="en.wikipedia.org/wiki/Vi">Vi</a>, <a href="en.wikipedia.org/wiki/Nano">Nano</a>, and especially <a href="http://en.wikipedia.org/wiki/Source_code_editor">IDE editor</a>, because I simply
just cant move my pinky finger from <code>Ctrl</code>, it just automatically gets stuck there. And the IDE editors are just too fancy for me.
(By the way I used to play Counter Strike, and just can&rsquo;t erase the habit of putting the finger there.)</p>

<br/>


<br/>


<p><img class="center" src="http://www.theinternetpatrol.com/the-argument-ginger-maryann-emacs-vi-20090825-125314.jpg" title="" ></p>

<p class="fig-title"></p>


<p style="text-align:center;">Emacs vs Vi, Source: <a href="http://www.theinternetpatrol.com/">The Internet Patrol</a></p>

<!--more-->


<p><strong>Related discussion</strong>: <a href="http://stackoverflow.com/questions/136056/ide-or-text-editor">IDE or Text Editor?</a></p>

<p>Anyway the most annoying problem when developing with Emacs is the project
management, right? Since we don&rsquo;t want to <code>C-x C-c</code> to <code>grep</code> some information,
or split the Emacs window to then do some shell stuffs there. It&rsquo;s pretty troublesome
when you quit your Emacs and then you have to split the windows to your preference again.
Times like these, usually you have to predefine the splitting functions to <code>.emacs</code>.
It&rsquo;s gonna waste more of your precious time again.</p>

<p>Well brace yourself, this tool is the perfect tool for project management
for Emacs, <a href="https://github.com/kiwanami/Emacs-window-manager">e2wm</a></p>

<p>Basically there are 5 kinds of perspectives you can choose for splitting
the window: <code>Code</code>, <code>Two</code>, <code>Doc</code>, <code>Dashboard</code>, and <code>Array</code> perspective, which
respectively has different Emacs plugin, such as <a href="www.emacswiki.org/Emacs/ImenuMode">imenu</a>,
or <a href="http://www.gnu.org/software/Emacs/manual/html_node/Emacs/List-Buffers.html">bufferlist</a>.</p>

<p><img class="center" src="http://ardiyu07.github.io/images/dp-code.png" width="480" height="288" title="'Code mode'" ></p>

<p class="fig-title">e2wm: code mode</p>


<br/>


<p><img class="center" src="http://ardiyu07.github.io/images/dp-two.png" width="480" height="288" title="'Two mode'" ></p>

<p class="fig-title">e2wm: two mode</p>


<br/>


<p><img class="center" src="http://ardiyu07.github.io/images/dp-code-with-shell.png" width="480" height="288" title="'Code mode with shell window'" ></p>

<p class="fig-title">e2wm: code mode with shell window</p>


<br/>


<p>To use e2wm is simple, what you have to do is just download
<a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm-config.el">e2wm-config.el</a>,
<a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm-vcs.el">e2wm-vcs.el</a>,
and <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm.el">e2wm.el</a>,
and then put it in your Emacs path (usually is <code>~/.emacs.d/</code>), and then add:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;e2wm</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-+&quot;</span><span class="p">)</span> <span class="ss">&#39;e2wm:start-management</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>to your <code>.emacs</code> file, and then start e2wm with <code>C-+</code>!</p>

<p>The github project for e2wm can be found <a href="https://github.com/kiwanami/Emacs-window-manager">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[並列プログラミングの概念: CUDAとOpenCL]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/01/jp-introduction-to-parallel-programming/"/>
    <updated>2014-02-01T01:16:37-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/01/jp-introduction-to-parallel-programming</id>
    <content type="html"><![CDATA[<p>同じ機械、同じCPU、同じGPU、同じプログラミング言語で、</p>

<p><strong> 自分のプログラムがもっと高速に実行できること、見たくありませんか？ </strong></p>

<!--more-->


<p>最近、多くの並列プログラミングのフレームワークが登場してきている。
世界中のプログラマが、使いやすさの面をかんがえて、
Python、Ruby、Javascriptといったスクリプト言語
のラッパも開発されて、<a href="github.com">GitHub</a>とかに載ってたりします。</p>

<ul>
<li>Haskell: <a href="http://hackage.haskell.org/package/cuda">FFI binding to the CUDA interface for programming NVIDIA GPUs</a></li>
<li>Ruby: <a href="https://github.com/xman/sgc-ruby-cuda/blob/master/doc/devel.rdoc">SGC-Ruby-CUDA</a></li>
<li>Python: <a href="https://pypi.python.org/pypi/pyopencl">PyOpenCL</a></li>
</ul>


<p>未だに並列プログラミングを知りませんといった方々には、並列プログラミングをやって
始めませんか？</p>

<p>まず、NVIDIA社が開発した<a href="http://www.nvidia.com/content/devzone/index.html">CUDAアーキテクチャ</a>。
シンプルで使いやすいと思います。それに、CUDAのSDKに付いてくるサンプルの数も豊富にあります。
もちろん、サンプルといっても、初級のレベルから最上級までのレベルが用意されています。
ただ単純にCUDAのAPIの使い方だけではなく、並列プログラミングの手順まで教えてくれたり
するので、あらかじめ予習するのがお勧めです。</p>

<p>昔は、CUDAのアーキテクチャとSDKは（超）不便ではあったが、最新のやつだと間違いなく便利です。
例えば、昔のやつだと、カーネルは１つしか動作できなかったり、倍精度の計算はサポート
されなかったので単精度の組み合わせを使ってかなり遅かったり。サンプルも多くなかったし。
最近のやつは、サンプルも豊富だし、カーネル内のカーネル呼び出し（つまり、再帰的関数呼び出し）
が可能になりました。なんといっても、最近のCUDAのAPIとSDKは、使いやすいし便利です。
しかし、残念なことに、CUDAはNVIDIAのものなので、NVIDIAのGPUでしか動作できない。</p>

<p>FYI: 一般にはCPUがやっている計算を、GPUで計算させることは、<strong> GPGPU（GPUによる汎目的計算）</strong>と言います。</p>

<p>次は、<a href="http://www.khronos.org/opencl/">OpenCL</a>です。Open Computing Languageの略。
当初はAppleとKhronos Groupが開発を指揮っていましたが、最近では主にKhronos GroupがOpenCL開発を
リードしています。OpenCLを利用して嬉しいのは、多岐に渡るプラットフォームで動作することができる。
また、当初はC言語しかサポートされなかったが、OpenCL 1.1からC++も使えるようになりました。</p>

<p>NVIDIAのGPUや、IntelのCPU（とGPU両方、HD4000型以降）、AMDのGPU、ARMのCPUで動きます。
何故可能なんだ？これらのメーカーのプログラマの代表者が集まり、合同開発をしているからです。それぞれのメーカー
のチップが個性的な機能で作られているが、一つのAPIを通じて利用できるのが、素晴らしいと思いません？
それぞれのベンダーのOpenCLのSDKは<a href="http://developer.amd.com/sdks/AMDAPPSDK/Pages/default.aspx">AMD OpenCL SDK</a>,
<a href="http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/">Intel OpenCL SDK</a>,
と<a href="https://developer.nvidia.com/opencl">NVIDIA OpenCL SDK</a>にあります。それぞれのOpenCLのSDKも
それぞれのベンダーが作成したサンプルも付いています。</p>

<p>上記２つは僕が主に利用したものです。もちろんこの他にも、多数あります。
無料・有料の観点で分けると、</p>

<p>フリー: <a href="http://openmp.org/wp/">OpenMP</a>, <a href="http://threadingbuildingblocks.org/">Intel&rsquo;s TBB</a>,
<a href="http://software.intel.com/en-us/articles/intel-array-building-blocks/">Intel&rsquo;s ArBB</a>,
<a href="https://computing.llnl.gov/tutorials/pthreads/">Pthreads</a></p>

<p>有料: <a href="http://www.pgroup.com/resources/accel.htm">PGI&rsquo;s Compiler with OpenACC</a>,
<a href="http://www.caps-entreprise.com/fr/page/index.php?id=148&amp;amp;p_p=36">CAPS&#8217; Compiler with OpenACC</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perkenalan ke Parallel Programming: CUDA dan OpenCL]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/01/id-introduction-to-parallel-programming/"/>
    <updated>2014-02-01T01:16:37-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/01/id-introduction-to-parallel-programming</id>
    <content type="html"><![CDATA[<p>Dengan komputer yang sama, CPU yang sama, GPU yang sama, bahasa pemrograman yang sama,</p>

<p><strong> Siapa yang gak mau liat program yang kita bikin jalan lebih cepat dari originalnya? </strong></p>

<!--more-->


<p>Akhir-akhir ini, mulai banyak framework untuk parallel programming yang bermunculan.
Dan dengan bantuan dari programmer-programmer handal dari seluruh dunia, bahasa pemrograman
parallel yang biasanya dilakukan dengan C atau C++, sekarang sudah bisa dilakukan
dengan scripting language seperti Python, Ruby, atau Javascript. Ada juga yang
mempunyai semangat tinggi untuk menggunakan framework parallel ini di bahasa yang lebih
rumit untuk functional programming, seperti Haskell atau Clojure.</p>

<ul>
<li>Haskell: <a href="http://hackage.haskell.org/package/cuda">FFI binding to the CUDA interface for programming NVIDIA GPUs</a></li>
<li>Ruby: <a href="https://github.com/xman/sgc-ruby-cuda/blob/master/doc/devel.rdoc">SGC-Ruby-CUDA</a></li>
<li>Python: <a href="https://pypi.python.org/pypi/pyopencl">PyOpenCL</a></li>
</ul>


<p>Bagi yang masih belum merasakan kehebatan dari parallel programming ini,
tunggu apalagi? Langsung menuju TKP dan download SDKnya, gan!</p>

<p>Pertama, ada <a href="http://www.nvidia.com/content/devzone/index.html">CUDA</a> yang di-maintain
oleh NVIDIA. Saya sudah menggunakan framework ini selama kurang lebih 4 tahun.
Frameworknya sendiri sangat simple dan straightforward untuk digunakan. Yang bikin
saya makin terpana adalah, jumlah sample program yang disediakan oleh NVIDIA
di dalam SDK(Software Development Kit)-nya. Bukan cuma hal-hal biasa seperti penggunakan
CUDA APInya yang bisa kita pelajari dari SDK tersebut, tapi juga metode-metode yang bisa
diimplementasikan dalam pengoptimisasian program (ke parallel program).</p>

<p>Dulu sewaktu CUDA SDK masih di dalam tahap pengembangan awal (versi 1.x), sangat
susah sekali menggunakan SDK dan menulis program dengan CUDA API. Tetapi seiring berjalannya
waktu, CUDA Toolkit yang paling baru, sangat praktis dan mudah digunakan/dimengerti.
Tapi perlu diingat, karena CUDA adalah model yang dikembangkan oleh NVIDIA, dan merupakan
benda proprietary, CUDA hanya bisa digunakan di GPU yang dimanufaktur oleh NVIDIA.</p>

<p>FYI: Teknik untuk melakukan komputasu yang biasanya dijalankan di CPU, biasa disebut <strong>komputasi GPGPU (General Purposed GPU)</strong>.</p>

<p>Berikutnya, ada <a href="http://www.khronos.org/opencl/">OpenCL</a>, yang merupakan singkatan dari <strong>Open Computing Language</strong>.
Awal mulanya, pengembangan OpenCL ini dipimpin oleh Apple dan Khronos Group (Sekarang Khronos Group yang memimpin
development secara keseluruhan). OpenCL merupakan sebuah parallel programming framework, yang bisa dipakai
di berbagai macam platform. Awal mulanya OpenCL hanya bisa digunakan dengan bahasa C saja, tetapi
bermula dari spesifikasi OpenCL 1.2, bahasa C++ sudah mulai bisa digunakan dengan menggunakan wrapper library untuk
bahasa C++.</p>

<p>Berbagai macam hardware vendor yang ternama ikut dalam pengembangan OpenCL: AMD, Intel, dan NVIDIA,
dan menyediakan compiler dan library-nya masing-masing. Karena masing-masing vendor mempunyai
blueprint yang berbeda untuk produknya, masing-masing vendor mengeluarkan SDK sendiri untuk
dalam penggunaan OpenCL. Seperti misalnya, untuk architecture GPU NVIDIA, struktur kernel yang dieksekusi
secara <a href="http://stackoverflow.com/questions/19284598/scalar-and-vector-kernels-in-opencl">scalar</a> akan mempunyai
execution speed yang lebih besar. Sedangkan untuk architecture CPU Intel,
struktur kernel yang di-craft untuk menggunakan <a href="http://en.wikipedia.org/wiki/Vector_processor">vector register</a>
akan berjalan lebih cepat dibandingkan
menggunakan struktur kernel scalar.</p>

<p>SDK dari masing-masing vendor bisa didownload dari website berikut:
<a href="http://developer.amd.com/sdks/AMDAPPSDK/Pages/default.aspx">AMD OpenCL SDK</a>,
<a href="http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/">Intel OpenCL SDK</a>,
dan <a href="https://developer.nvidia.com/opencl">NVIDIA OpenCL SDK</a>. Masing-masing SDK dilengkapi
dengan sample yang disediakan oleh masing-masing vendor. Menurut saya, akan lebih mudah
untuk mempelajari OpenCL apabila kita sudah mengerti programming dengan memakai CUDA
terlebih dahulu.</p>

<p>Tentu saja masih banyak lagi framework untuk parallel programming di luar sana.
Rata-rata bisa didapatkan secara gratis, tapi ada juga yang tidak gratis.</p>

<p>Contoh untuk framework yang gratis: <a href="http://openmp.org/wp/">OpenMP</a>, <a href="http://threadingbuildingblocks.org/">Intel&rsquo;s TBB</a>,
<a href="http://software.intel.com/en-us/articles/intel-array-building-blocks/">Intel&rsquo;s ArBB</a>,
<a href="https://computing.llnl.gov/tutorials/pthreads/">Pthreads</a></p>

<p>Tidak gratis: <a href="http://www.pgroup.com/resources/accel.htm">PGI&rsquo;s Compiler with OpenACC</a>,
<a href="http://www.caps-entreprise.com/fr/page/index.php?id=148&amp;amp;p_p=36">CAPS&#8217; Compiler with OpenACC</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Parallel Programming: CUDA and OpenCL]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/01/en-introduction-to-parallel-programming/"/>
    <updated>2014-02-01T01:16:37-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/01/en-introduction-to-parallel-programming</id>
    <content type="html"><![CDATA[<p>Using exactly the same machine, same cpu, same gpu, same programming language,</p>

<p><strong>Who doesn&rsquo;t want to see his programs run faster?</strong></p>

<!--more-->


<p>Many parallel programming frameworks have been developed and released recently,
and with the help of many amazing programmers worldwide, these APIs have also
been wrapped beautifully into many scripting languages such as Python, Ruby,
or even Javascript.</p>

<ul>
<li>Haskell: <a href="http://hackage.haskell.org/package/cuda">FFI binding to the CUDA interface for programming NVIDIA GPUs</a></li>
<li>Ruby: <a href="https://github.com/xman/sgc-ruby-cuda/blob/master/doc/devel.rdoc">SGC-Ruby-CUDA</a></li>
<li>Python: <a href="https://pypi.python.org/pypi/pyopencl">PyOpenCL</a></li>
</ul>


<p>Soo for those of you who haven&rsquo;t experienced the elegance of parallel computing,
what are you waiting for?</p>

<p>First of all, there is <a href="http://www.nvidia.com/content/devzone/index.html">CUDA</a>,
which is maintained by NVIDIA. I have been developing some programs using CUDA
for ~4 years now. The framework itself is pretty simple and straightforward to
use, and I am amazed with the number of sample programs NVIDIA provides which
come along with the CUDA Toolkit. They make us incredibly easy to learn some
basic stuff, not only how to use CUDA API but also some important algorithms
and optimization methods to develop a parallel program using CUDA.</p>

<p>Having said so, actually it was pretty hard to develop using CUDA SDK back then
(when it was still version 1.x). But as the time goes, the current SDK version
just became easier to understand, to install, and to develop with. However,
since CUDA API is not an open-source framework, it is only available for
NVIDIA&rsquo;s GPUs (from GeForce 8800 to the newest one).</p>

<p>FYI: The technique of having a computation that traditionally runs on CPU,
and then ports it to GPU, is basically called a <strong>GPGPU (General Purposed GPU) computing</strong>.</p>

<p>Then there is <a href="http://www.khronos.org/opencl/">OpenCL</a>, derived from <strong>Open Computing Language</strong>.
OpenCL was initially developed by Apple and Khronos Group. It is another parallel programming
framework, with the perk of being able to be executed in many platforms. At
first OpenCL was only released with the standard C99, but then they added the
C++ wrappers to the runtime API.</p>

<p>Some major vendors support it: AMD, Intel, NVIDIA, with its own compiler.
Since every vendor manufactures different computational technology, each of them
releases an OpenCL programming SDK and this can be seen inside the following<br/>
website respectively: <a href="http://developer.amd.com/sdks/AMDAPPSDK/Pages/default.aspx">AMD OpenCL SDK</a>,
<a href="http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/">Intel OpenCL SDK</a>,
and <a href="https://developer.nvidia.com/opencl">NVIDIA OpenCL SDK</a>. Each SDK is provided
with sample programs. IMO, learning OpenCL will not be that hard if you have
previously done some CUDA programming.</p>

<p>There are plenty more out there and you can get some of them for free
(or maybe even already installed in your computer) but some aren&rsquo;t.</p>

<p>Examples for free APIs: <a href="http://openmp.org/wp/">OpenMP</a>, <a href="http://threadingbuildingblocks.org/">Intel&rsquo;s TBB</a>,
<a href="http://software.intel.com/en-us/articles/intel-array-building-blocks/">Intel&rsquo;s ArBB</a>,
<a href="https://computing.llnl.gov/tutorials/pthreads/">Pthreads</a></p>

<p>Non free: <a href="http://www.pgroup.com/resources/accel.htm">PGI&rsquo;s Compiler with OpenACC</a>,
<a href="http://www.caps-entreprise.com/fr/page/index.php?id=148&amp;amp;p_p=36">CAPS&#8217; Compiler with OpenACC</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cygwin + ipython. Super便利.]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/01/21/jp-cygwin-ipython-perfection/"/>
    <updated>2014-01-21T21:27:00-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/01/21/jp-cygwin-ipython-perfection</id>
    <content type="html"><![CDATA[<p>僕はUNIXのプログラミング環境が好きです。ただ、なんかGNU/LinuxのGUIはピンとこないですね。
Windows 7のGUIの方が使いやすいし、見た目もいい感じだし。（慣れの問題かな..）</p>

<p>僕みたいな人にとっては、<a href="http://www.cygwin.com/">Cygwin</a>を使うと便利です。</p>

<!--more-->


<p>しかし、まーWindowsの環境とPOSIXスタイルの環境は大分異なるのが理由かもしれないけど、
たまにはツールとかソフトをインストールするには、Cygwinだと非常に時間がかかってしまう
時もあります。GNU/Linuxだと、<code>yum</code>とか<code>apt-get</code>という必殺技がデフォルトでパッケージに入って
便利だけど、Cygwinだと残念ながらデフォルトのパッケージにはない。。
(最近<a href="http://code.google.com/p/apt-cyg/">apt-cyg</a>というのを見つけてテンション上がったけど)</p>

<p>こないだCygwin上で<a href="ipython.org">ipython</a>+<a href="numpy.org">numpy</a>+<a href="scipy.org">scipy</a>+<a href="matplotlib.org">matplotlib</a>を使いたくてインストールしてみたところ、
土曜日丸一日使ってしまった。</p>

<p>僕の休日を返せ。と言いたかったけど、<code>ipython</code>+<code>numpy</code>+<code>scipy</code>+<code>matplotlib</code>の素晴らしさで落ち着けた。</p>

<p>ということで言いたかったのは、</p>

<p>Cygwin + Ipythonは、す・ば・ら・し・い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cygwin + ipython. Wajib Dicoba.]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/01/21/id-cygwin-ipython-perfection/"/>
    <updated>2014-01-21T21:27:00-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/01/21/id-cygwin-ipython-perfection</id>
    <content type="html"><![CDATA[<p>Saya termasuk orang yang suka sama UNIX environment, tapi gak terlalu suka sama GUI GNU/Linux. Karena itu sampe sekarang masih pake Windows 7.</p>

<p>Orang seperti kita, cocoknya pasti menggunakan <a href="http://www.cygwin.com/">Cygwin</a>.</p>

<!--more-->


<p>&lt;Tapi ada yang sangat disayangkan dari Cygwin, yaitu ketidakefisienan dalam menginstall sebuah tool atau software. Kadang-kadang gak ada jalan lain selain menginstall secara manual (lewat process yang umum seperti penggunaan <a href="http://en.wikipedia.org/wiki/GNU_build_system">autotools</a>. <code>./configure; make; make install</code>). Di GNU/Linux, ada tool yang praktis kayak <code>yum</code> atau <code>apt-get</code>, yang memungkinkan developer untuk menginstall hanya dalam satu baris command. (Sebenernya di Cygwin juga ada open-source project untuk ini, namanya <a href="http://code.google.com/p/apt-cyg/">apt-cyg</a>, tapi sayangnya bukan default package Cygwin).</p>

<p>Baru-baru ini saya menghadapi masalah untuk setup <a href="ipython.org">ipython</a> dengan <a href="numpy.org">numpy</a>+<a href="scipy.org">scipy</a>+<a href="matplotlib.org">matplotlib</a> di Cygwin, dan harus menggunakan weekend satu hari penuh untuk ini..</p>

<p>Tapi sepertinya usaha itu gak sia-sia.</p>

<p>Cygwin + Ipython. Mantap gan. Wajib dicoba!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cygwin + ipython. A Perfection.]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/01/21/en-cygwin-ipython-perfection/"/>
    <updated>2014-01-21T21:27:00-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/01/21/en-cygwin-ipython-perfection</id>
    <content type="html"><![CDATA[<p>I&rsquo;m one of those programmer who just loves anything about UNIX environment, but just feels weird about using Linux GUI hence stuck with Windows 7.</p>

<p>The most perfect tool for us is of course, <a href="http://www.cygwin.com/">Cygwin</a>.</p>

<!--more-->


<p>However, there are some (many, actually) weaknesses in Cygwin such as sometime you have to manually figure out how to install some softwares manually, instead of just invoking sudo apt-get in a Linux system. (Although there is an amazing project for this, <a href="http://code.google.com/p/apt-cyg/">apt-cyg</a>. But this is not Cygwin&rsquo;s default package.)</p>

<p>I recently just faced this problem when trying to install <a href="ipython.org">ipython</a> with <a href="numpy.org">numpy</a>+<a href="scipy.org">scipy</a>+<a href="matplotlib.org">matplotlib</a> in my system in Cygwin, and had to spend all day (which was Saturday), to finally have it installed correctly.</p>

<p>Nevertheless, It was really worth the time.</p>

<p>Cygwin + Ipython. is. just. amazing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mukadimah]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/01/21/mukadimah/"/>
    <updated>2014-01-21T01:18:18-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/01/21/mukadimah</id>
    <content type="html"><![CDATA[<p>Test post doang. Gak usah dihiraukan. <i class='emoji smile'></i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初期化]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/01/21/chu-qi-hua/"/>
    <updated>2014-01-21T01:17:40-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/01/21/chu-qi-hua</id>
    <content type="html"><![CDATA[<p>テストポストです。無視してください。<i class='emoji smile'></i></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/01/20/first-post/"/>
    <updated>2014-01-20T23:25:52-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/01/20/first-post</id>
    <content type="html"><![CDATA[<p>Only a Test Post. Please Ignore. <i class='emoji smile'></i></p>
]]></content>
  </entry>
  
</feed>
