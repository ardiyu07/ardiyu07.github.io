<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 並列コンピューティング | Yuri Ardila]]></title>
  <link href="http://ardiyu07.github.io/blog/categories/bing-lie-konpiyuteingu/atom.xml" rel="self"/>
  <link href="http://ardiyu07.github.io/"/>
  <updated>2014-02-13T23:07:51-08:00</updated>
  <id>http://ardiyu07.github.io/</id>
  <author>
    <name><![CDATA[Yuri Ardila]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[高速化手法: ループ展開]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/13/jp-parallelizing-technique-simple-loop-unrolling/"/>
    <updated>2014-02-13T01:09:00-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/13/jp-parallelizing-technique-simple-loop-unrolling</id>
    <content type="html"><![CDATA[<p>ループ展開（英：Loop Unrolling/Loop Unwinding）は、高速化の基本でもあり、効果が高い時は少なくないです。
Wikipediaによると、</p>

<p><blockquote><p>ループ展開の目的は、毎回の繰り返しごとに発生する「ループの終了」条件のテストを減少させる（もしくはなくす）事によって、実行速度を向上させることである。ループは、ループ自体を制御するためのオーバーヘッドがなくなるように、独立した命令ブロックの連続に書き換えることができる。</p><footer><strong>Wikipedia <a href="http://ja.wikipedia.org/wiki/%E3%83%AB%E3%83%BC%E3%83%97%E5%B1%95%E9%96%8B">http://ja.wikipedia.org/wiki/%E3%83%AB%E3%83%BC%E3%83%97%E5%B1%95%E9%96%8B</a> ループ展開</strong></footer></blockquote></p>

<!--more-->


<p>したがって、シリアルプロセッサでも、ループ展開によってプログラムの実行時間を減らすことができます。
最近、大体のプロセッサはパイプライン化が可能なので、ループ展開によってデータ読み書きのレイテンシー
を減らすことにもつながります。つまり、ループ展開は<a href="http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%91%E3%82%A4%E3%83%97%E3%83%A9%E3%82%A4%E3%83%B3">（ソフトウェア）パイプライン</a>を促します。</p>

<p>サンプルコード:<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">N_DATA</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>サンプルコードにループ展開をあてると:<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">N_DATA</span><span class="p">;</span> <span class="n">i</span><span class="o">+=</span><span class="mi">4</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>  <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'>  <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'>  <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">3</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>2つ以上のプロセッサが備わっているデバイス（並列プロセッサ）には、ループ内の各イテレーションを
各プロセッサにあてることで、同時実行可能になり、実行時間をより低くすることができます。</p>

<p>しかし、並列実行可能な環境に、ループを展開してワークロードを分割する時に、一つ注意点を頭に入れなければ
ならないことがあります。それは、<a href="http://wwweic.eri.u-tokyo.ac.jp/computer/manual/altix/compile/CC/Intel_Cdoc91/main_cls/mergedProjects/optaps_cls/common/optaps_vec_dtdp.htm">データ依存性</a>のことです。間違ってループ展開をしてしまうと、不正解の実行結果に導かれたり、
最大限の高速化を得られず、だったりします。
ここではサンプルコードにはデータ依存性がないので、後々時間があればデータ依存性について書きます。</p>

<p>OpenMP実装:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">pragma</span> <span class="n">omp</span> <span class="n">parallel</span> <span class="k">for</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span> <span class="n">N_DATA</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>CUDA実装:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cuda'><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">global</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span>
</span><span class='line'><span class="kt">void</span> <span class="n">saxpy</span><span class="p">(</span><span class="kt">float</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">b</span><span class="p">,</span> <span class="kt">float</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">float</span> <span class="n">alpha</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="nb">threadIdx</span><span class="p">.</span><span class="n">x</span> <span class="o">+</span> <span class="nb">blockDim</span><span class="p">.</span><span class="n">x</span> <span class="o">*</span> <span class="nb">blockIdx</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>OpenCL実装:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">kernel</span>
</span><span class='line'><span class="kt">void</span> <span class="n">saxpy</span><span class="p">(</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">global</span> <span class="kt">float</span> <span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">a</span><span class="p">,</span> <span class="n">__global</span> <span class="kt">float</span> <span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">b</span><span class="p">,</span> <span class="n">__global</span> <span class="kt">float</span> <span class="o">*</span><span class="n">c</span><span class="p">,</span> <span class="kt">float</span> <span class="n">alpha</span><span class="p">)</span> <span class="p">{</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">get_global_id</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'> <span class="n">a</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">alpha</span> <span class="o">*</span> <span class="n">b</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="n">c</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[並列プログラミングの概念: CUDAとOpenCL]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/01/jp-introduction-to-parallel-programming/"/>
    <updated>2014-02-01T01:16:37-08:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/01/jp-introduction-to-parallel-programming</id>
    <content type="html"><![CDATA[<p>同じ機械、同じCPU、同じGPU、同じプログラミング言語で、</p>

<p><strong> 自分のプログラムがもっと高速に実行できること、見たくありませんか？ </strong></p>

<!--more-->


<p>最近、多くの並列プログラミングのフレームワークが登場してきている。
世界中のプログラマが、使いやすさの面をかんがえて、
Python、Ruby、Javascriptといったスクリプト言語
のラッパも開発されて、<a href="github.com">GitHub</a>とかに載ってたりします。</p>

<ul>
<li>Haskell: <a href="http://hackage.haskell.org/package/cuda">FFI binding to the CUDA interface for programming NVIDIA GPUs</a></li>
<li>Ruby: <a href="https://github.com/xman/sgc-ruby-cuda/blob/master/doc/devel.rdoc">SGC-Ruby-CUDA</a></li>
<li>Python: <a href="https://pypi.python.org/pypi/pyopencl">PyOpenCL</a></li>
</ul>


<p>未だに並列プログラミングを知りませんといった方々には、並列プログラミングをやって
始めませんか？</p>

<p>まず、NVIDIA社が開発した<a href="http://www.nvidia.com/content/devzone/index.html">CUDAアーキテクチャ</a>。
シンプルで使いやすいと思います。それに、CUDAのSDKに付いてくるサンプルの数も豊富にあります。
もちろん、サンプルといっても、初級のレベルから最上級までのレベルが用意されています。
ただ単純にCUDAのAPIの使い方だけではなく、並列プログラミングの手順まで教えてくれたり
するので、あらかじめ予習するのがお勧めです。</p>

<p>昔は、CUDAのアーキテクチャとSDKは（超）不便ではあったが、最新のやつだと間違いなく便利です。
例えば、昔のやつだと、カーネルは１つしか動作できなかったり、倍精度の計算はサポート
されなかったので単精度の組み合わせを使ってかなり遅かったり。サンプルも多くなかったし。
最近のやつは、サンプルも豊富だし、カーネル内のカーネル呼び出し（つまり、再帰的関数呼び出し）
が可能になりました。なんといっても、最近のCUDAのAPIとSDKは、使いやすいし便利です。
しかし、残念なことに、CUDAはNVIDIAのものなので、NVIDIAのGPUでしか動作できない。</p>

<p>FYI: 一般にはCPUがやっている計算を、GPUで計算させることは、<strong> GPGPU（GPUによる汎目的計算）</strong>と言います。</p>

<p>次は、<a href="http://www.khronos.org/opencl/">OpenCL</a>です。Open Computing Languageの略。
当初はAppleとKhronos Groupが開発を指揮っていましたが、最近では主にKhronos GroupがOpenCL開発を
リードしています。OpenCLを利用して嬉しいのは、多岐に渡るプラットフォームで動作することができる。
また、当初はC言語しかサポートされなかったが、OpenCL 1.1からC++も使えるようになりました。</p>

<p>NVIDIAのGPUや、IntelのCPU（とGPU両方、HD4000型以降）、AMDのGPU、ARMのCPUで動きます。
何故可能なんだ？これらのメーカーのプログラマの代表者が集まり、合同開発をしているからです。それぞれのメーカー
のチップが個性的な機能で作られているが、一つのAPIを通じて利用できるのが、素晴らしいと思いません？
それぞれのベンダーのOpenCLのSDKは<a href="http://developer.amd.com/sdks/AMDAPPSDK/Pages/default.aspx">AMD OpenCL SDK</a>,
<a href="http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/">Intel OpenCL SDK</a>,
と<a href="https://developer.nvidia.com/opencl">NVIDIA OpenCL SDK</a>にあります。それぞれのOpenCLのSDKも
それぞれのベンダーが作成したサンプルも付いています。</p>

<p>上記２つは僕が主に利用したものです。もちろんこの他にも、多数あります。
無料・有料の観点で分けると、</p>

<p>フリー: <a href="http://openmp.org/wp/">OpenMP</a>, <a href="http://threadingbuildingblocks.org/">Intel&rsquo;s TBB</a>,
<a href="http://software.intel.com/en-us/articles/intel-array-building-blocks/">Intel&rsquo;s ArBB</a>,
<a href="https://computing.llnl.gov/tutorials/pthreads/">Pthreads</a></p>

<p>有料: <a href="http://www.pgroup.com/resources/accel.htm">PGI&rsquo;s Compiler with OpenACC</a>,
<a href="http://www.caps-entreprise.com/fr/page/index.php?id=148&amp;amp;p_p=36">CAPS' Compiler with OpenACC</a></p>

<p></p>
]]></content>
  </entry>
  
</feed>
