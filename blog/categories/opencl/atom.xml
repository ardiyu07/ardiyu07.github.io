<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenCL | Yuri Ardila]]></title>
  <link href="http://ardiyu07.github.io/blog/categories/opencl/atom.xml" rel="self"/>
  <link href="http://ardiyu07.github.io/"/>
  <updated>2014-02-06T16:14:09+09:00</updated>
  <id>http://ardiyu07.github.io/</id>
  <author>
    <name><![CDATA[Yuri Ardila]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[並列プログラミングの概念: CUDAとOpenCL]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/01/jp-introduction-to-parallel-programming/"/>
    <updated>2014-02-01T18:16:37+09:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/01/jp-introduction-to-parallel-programming</id>
    <content type="html"><![CDATA[<p>同じ機械、同じCPU、同じGPU、同じプログラミング言語で、</p>

<p><strong> 自分のプログラムがもっと高速に実行できること、見たくありませんか？ </strong></p>

<!--more-->


<p>最近、多くの並列プログラミングのフレームワークが登場してきている。
世界中のプログラマが、使いやすさの面をかんがえて、
Python、Ruby、Javascriptといったスクリプト言語
のラッパも開発されて、<a href="github.com">GitHub</a>とかに載ってたりします。</p>

<ul>
<li>Haskell: <a href="http://hackage.haskell.org/package/cuda">FFI binding to the CUDA interface for programming NVIDIA GPUs</a></li>
<li>Ruby: <a href="https://github.com/xman/sgc-ruby-cuda/blob/master/doc/devel.rdoc">SGC-Ruby-CUDA</a></li>
<li>Python: <a href="https://pypi.python.org/pypi/pyopencl">PyOpenCL</a></li>
</ul>


<p>未だに並列プログラミングを知りませんといった方々には、並列プログラミングをやって
始めませんか？</p>

<p>まず、NVIDIA社が開発した<a href="http://www.nvidia.com/content/devzone/index.html">CUDAアーキテクチャ</a>。
シンプルで使いやすいと思います。それに、CUDAのSDKに付いてくるサンプルの数も豊富にあります。
もちろん、サンプルといっても、初級のレベルから最上級までのレベルが用意されています。
ただ単純にCUDAのAPIの使い方だけではなく、並列プログラミングの手順まで教えてくれたり
するので、あらかじめ予習するのがお勧めです。</p>

<p>昔は、CUDAのアーキテクチャとSDKは（超）不便ではあったが、最新のやつだと間違いなく便利です。
例えば、昔のやつだと、カーネルは１つしか動作できなかったり、倍精度の計算はサポート
されなかったので単精度の組み合わせを使ってかなり遅かったり。サンプルも多くなかったし。
最近のやつは、サンプルも豊富だし、カーネル内のカーネル呼び出し（つまり、再帰的関数呼び出し）
が可能になりました。なんといっても、最近のCUDAのAPIとSDKは、使いやすいし便利です。
しかし、残念なことに、CUDAはNVIDIAのものなので、NVIDIAのGPUでしか動作できない。</p>

<p>FYI: 一般にはCPUがやっている計算を、GPUで計算させることは、<strong> GPGPU（GPUによる汎目的計算）</strong>と言います。</p>

<p>次は、<a href="http://www.khronos.org/opencl/">OpenCL</a>です。Open Computing Languageの略。
当初はAppleとKhronos Groupが開発を指揮っていましたが、最近では主にKhronos GroupがOpenCL開発を
リードしています。OpenCLを利用して嬉しいのは、多岐に渡るプラットフォームで動作することができる。
また、当初はC言語しかサポートされなかったが、OpenCL 1.1からC++も使えるようになりました。</p>

<p>NVIDIAのGPUや、IntelのCPU（とGPU両方、HD4000型以降）、AMDのGPU、ARMのCPUで動きます。
何故可能なんだ？これらのメーカーのプログラマの代表者が集まり、合同開発をしているからです。それぞれのメーカー
のチップが個性的な機能で作られているが、一つのAPIを通じて利用できるのが、素晴らしいと思いません？
それぞれのベンダーのOpenCLのSDKは<a href="http://developer.amd.com/sdks/AMDAPPSDK/Pages/default.aspx">AMD OpenCL SDK</a>,
<a href="http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/">Intel OpenCL SDK</a>,
と<a href="https://developer.nvidia.com/opencl">NVIDIA OpenCL SDK</a>にあります。それぞれのOpenCLのSDKも
それぞれのベンダーが作成したサンプルも付いています。</p>

<p>上記２つは僕が主に利用したものです。もちろんこの他にも、多数あります。
無料・有料の観点で分けると、</p>

<p>フリー: <a href="http://openmp.org/wp/">OpenMP</a>, <a href="http://threadingbuildingblocks.org/">Intel&rsquo;s TBB</a>,
<a href="http://software.intel.com/en-us/articles/intel-array-building-blocks/">Intel&rsquo;s ArBB</a>,
<a href="https://computing.llnl.gov/tutorials/pthreads/">Pthreads</a></p>

<p>有料: <a href="http://www.pgroup.com/resources/accel.htm">PGI&rsquo;s Compiler with OpenACC</a>,
<a href="http://www.caps-entreprise.com/fr/page/index.php?id=148&amp;amp;p_p=36">CAPS' Compiler with OpenACC</a></p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perkenalan ke Parallel Programming: CUDA dan OpenCL]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/01/id-introduction-to-parallel-programming/"/>
    <updated>2014-02-01T18:16:37+09:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/01/id-introduction-to-parallel-programming</id>
    <content type="html"><![CDATA[<p>Dengan komputer yang sama, CPU yang sama, GPU yang sama, bahasa pemrograman yang sama,</p>

<p><strong> Siapa yang gak mau liat program yang kita bikin jalan lebih cepat dari originalnya? </strong></p>

<!--more-->


<p>Akhir-akhir ini, mulai banyak framework untuk parallel programming yang bermunculan.
Dan dengan bantuan dari programmer-programmer handal dari seluruh dunia, bahasa pemrograman
parallel yang biasanya dilakukan dengan C atau C++, sekarang sudah bisa dilakukan
dengan scripting language seperti Python, Ruby, atau Javascript. Ada juga yang
mempunyai semangat tinggi untuk menggunakan framework parallel ini di bahasa yang lebih
rumit untuk functional programming, seperti Haskell atau Clojure.</p>

<ul>
<li>Haskell: <a href="http://hackage.haskell.org/package/cuda">FFI binding to the CUDA interface for programming NVIDIA GPUs</a></li>
<li>Ruby: <a href="https://github.com/xman/sgc-ruby-cuda/blob/master/doc/devel.rdoc">SGC-Ruby-CUDA</a></li>
<li>Python: <a href="https://pypi.python.org/pypi/pyopencl">PyOpenCL</a></li>
</ul>


<p>Bagi yang masih belum merasakan kehebatan dari parallel programming ini,
tunggu apalagi? Langsung menuju TKP dan download SDKnya, gan!</p>

<p>Pertama, ada <a href="http://www.nvidia.com/content/devzone/index.html">CUDA</a> yang di-maintain
oleh NVIDIA. Saya sudah menggunakan framework ini selama kurang lebih 4 tahun.
Frameworknya sendiri sangat simple dan straightforward untuk digunakan. Yang bikin
saya makin terpana adalah, jumlah sample program yang disediakan oleh NVIDIA
di dalam SDK(Software Development Kit)-nya. Bukan cuma hal-hal biasa seperti penggunakan
CUDA APInya yang bisa kita pelajari dari SDK tersebut, tapi juga metode-metode yang bisa
diimplementasikan dalam pengoptimisasian program (ke parallel program).</p>

<p>Dulu sewaktu CUDA SDK masih di dalam tahap pengembangan awal (versi 1.x), sangat
susah sekali menggunakan SDK dan menulis program dengan CUDA API. Tetapi seiring berjalannya
waktu, CUDA Toolkit yang paling baru, sangat praktis dan mudah digunakan/dimengerti.
Tapi perlu diingat, karena CUDA adalah model yang dikembangkan oleh NVIDIA, dan merupakan
benda proprietary, CUDA hanya bisa digunakan di GPU yang dimanufaktur oleh NVIDIA.</p>

<p>FYI: Teknik untuk melakukan komputasu yang biasanya dijalankan di CPU, biasa disebut <strong>komputasi GPGPU (General Purposed GPU)</strong>.</p>

<p>Berikutnya, ada <a href="http://www.khronos.org/opencl/">OpenCL</a>, yang merupakan singkatan dari <strong>Open Computing Language</strong>.
Awal mulanya, pengembangan OpenCL ini dipimpin oleh Apple dan Khronos Group (Sekarang Khronos Group yang memimpin
development secara keseluruhan). OpenCL merupakan sebuah parallel programming framework, yang bisa dipakai
di berbagai macam platform. Awal mulanya OpenCL hanya bisa digunakan dengan bahasa C saja, tetapi
bermula dari spesifikasi OpenCL 1.2, bahasa C++ sudah mulai bisa digunakan dengan menggunakan wrapper library untuk
bahasa C++.</p>

<p>Berbagai macam hardware vendor yang ternama ikut dalam pengembangan OpenCL: AMD, Intel, dan NVIDIA,
dan menyediakan compiler dan library-nya masing-masing. Karena masing-masing vendor mempunyai
blueprint yang berbeda untuk produknya, masing-masing vendor mengeluarkan SDK sendiri untuk
dalam penggunaan OpenCL. Seperti misalnya, untuk architecture GPU NVIDIA, struktur kernel yang dieksekusi
secara <a href="http://stackoverflow.com/questions/19284598/scalar-and-vector-kernels-in-opencl">scalar</a> akan mempunyai
execution speed yang lebih besar. Sedangkan untuk architecture CPU Intel,
struktur kernel yang di-craft untuk menggunakan <a href="http://en.wikipedia.org/wiki/Vector_processor">vector register</a>
akan berjalan lebih cepat dibandingkan
menggunakan struktur kernel scalar.</p>

<p>SDK dari masing-masing vendor bisa didownload dari website berikut:
<a href="http://developer.amd.com/sdks/AMDAPPSDK/Pages/default.aspx">AMD OpenCL SDK</a>,
<a href="http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/">Intel OpenCL SDK</a>,
dan <a href="https://developer.nvidia.com/opencl">NVIDIA OpenCL SDK</a>. Masing-masing SDK dilengkapi
dengan sample yang disediakan oleh masing-masing vendor. Menurut saya, akan lebih mudah
untuk mempelajari OpenCL apabila kita sudah mengerti programming dengan memakai CUDA
terlebih dahulu.</p>

<p>Tentu saja masih banyak lagi framework untuk parallel programming di luar sana.
Rata-rata bisa didapatkan secara gratis, tapi ada juga yang tidak gratis.</p>

<p>Contoh untuk framework yang gratis: <a href="http://openmp.org/wp/">OpenMP</a>, <a href="http://threadingbuildingblocks.org/">Intel&rsquo;s TBB</a>,
<a href="http://software.intel.com/en-us/articles/intel-array-building-blocks/">Intel&rsquo;s ArBB</a>,
<a href="https://computing.llnl.gov/tutorials/pthreads/">Pthreads</a></p>

<p>Tidak gratis: <a href="http://www.pgroup.com/resources/accel.htm">PGI&rsquo;s Compiler with OpenACC</a>,
<a href="http://www.caps-entreprise.com/fr/page/index.php?id=148&amp;amp;p_p=36">CAPS' Compiler with OpenACC</a></p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introduction to Parallel Programming: CUDA and OpenCL]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/01/en-introduction-to-parallel-programming/"/>
    <updated>2014-02-01T18:16:37+09:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/01/en-introduction-to-parallel-programming</id>
    <content type="html"><![CDATA[<p>Using exactly the same machine, same cpu, same gpu, same programming language,</p>

<p><strong>Who doesn&rsquo;t want to see his programs run faster?</strong></p>

<!--more-->


<p>Many parallel programming frameworks have been developed and released recently,
and with the help of many amazing programmers worldwide, these APIs have also
been wrapped beautifully into many scripting languages such as Python, Ruby,
or even Javascript.</p>

<ul>
<li>Haskell: <a href="http://hackage.haskell.org/package/cuda">FFI binding to the CUDA interface for programming NVIDIA GPUs</a></li>
<li>Ruby: <a href="https://github.com/xman/sgc-ruby-cuda/blob/master/doc/devel.rdoc">SGC-Ruby-CUDA</a></li>
<li>Python: <a href="https://pypi.python.org/pypi/pyopencl">PyOpenCL</a></li>
</ul>


<p>Soo for those of you who haven&rsquo;t experienced the elegance of parallel computing,
what are you waiting for?</p>

<p>First of all, there is <a href="http://www.nvidia.com/content/devzone/index.html">CUDA</a>,
which is maintained by NVIDIA. I have been developing some programs using CUDA
for ~4 years now. The framework itself is pretty simple and straightforward to
use, and I am amazed with the number of sample programs NVIDIA provides which
come along with the CUDA Toolkit. They make us incredibly easy to learn some
basic stuff, not only how to use CUDA API but also some important algorithms
and optimization methods to develop a parallel program using CUDA.</p>

<p>Having said so, actually it was pretty hard to develop using CUDA SDK back then
(when it was still version 1.x). But as the time goes, the current SDK version
just became easier to understand, to install, and to develop with. However,
since CUDA API is not an open-source framework, it is only available for
NVIDIA&rsquo;s GPUs (from GeForce 8800 to the newest one).</p>

<p>FYI: The technique of having a computation that traditionally runs on CPU,
and then ports it to GPU, is basically called a <strong>GPGPU (General Purposed GPU) computing</strong>.</p>

<p>Then there is <a href="http://www.khronos.org/opencl/">OpenCL</a>, derived from <strong>Open Computing Language</strong>.
OpenCL was initially developed by Apple and Khronos Group. It is another parallel programming
framework, with the perk of being able to be executed in many platforms. At
first OpenCL was only released with the standard C99, but then they added the
C++ wrappers to the runtime API.</p>

<p>Some major vendors support it: AMD, Intel, NVIDIA, with its own compiler.
Since every vendor manufactures different computational technology, each of them
releases an OpenCL programming SDK and this can be seen inside the following<br/>
website respectively: <a href="http://developer.amd.com/sdks/AMDAPPSDK/Pages/default.aspx">AMD OpenCL SDK</a>,
<a href="http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/">Intel OpenCL SDK</a>,
and <a href="https://developer.nvidia.com/opencl">NVIDIA OpenCL SDK</a>. Each SDK is provided
with sample programs. IMO, learning OpenCL will not be that hard if you have
previously done some CUDA programming.</p>

<p>There are plenty more out there and you can get some of them for free
(or maybe even already installed in your computer) but some aren&rsquo;t.</p>

<p>Examples for free APIs: <a href="http://openmp.org/wp/">OpenMP</a>, <a href="http://threadingbuildingblocks.org/">Intel&rsquo;s TBB</a>,
<a href="http://software.intel.com/en-us/articles/intel-array-building-blocks/">Intel&rsquo;s ArBB</a>,
<a href="https://computing.llnl.gov/tutorials/pthreads/">Pthreads</a></p>

<p>Non free: <a href="http://www.pgroup.com/resources/accel.htm">PGI&rsquo;s Compiler with OpenACC</a>,
<a href="http://www.caps-entreprise.com/fr/page/index.php?id=148&amp;amp;p_p=36">CAPS' Compiler with OpenACC</a></p>

<p></p>
]]></content>
  </entry>
  
</feed>
