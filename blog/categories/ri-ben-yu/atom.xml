<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 日本語 | Yuri Ardila]]></title>
  <link href="http://ardiyu07.github.io/blog/categories/ri-ben-yu/atom.xml" rel="self"/>
  <link href="http://ardiyu07.github.io/"/>
  <updated>2014-02-06T16:14:09+09:00</updated>
  <id>http://ardiyu07.github.io/</id>
  <author>
    <name><![CDATA[Yuri Ardila]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacsとe2wmでプログラムをもっと楽しく書ける！]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/05/jp-coding-with-emacs-and-e2wm-brilliant/"/>
    <updated>2014-02-05T00:00:00+09:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/05/jp-coding-with-emacs-and-e2wm-brilliant</id>
    <content type="html"><![CDATA[<p>5年前初めてプログラムを書きました。初めて書いたプログラムは、
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">include</span> <span class="p">{</span><span class="n">stdio</span><span class="p">.</span><span class="n">h</span><span class="p">}</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span><span class="n">printf</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">Hello</span> <span class="n">World</span><span class="o">!</span><span class="err">\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;);</span><span class="k">return</span> <span class="mi">0</span><span class="p">;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
でした。
（昔はHTMLとCSSをNotepadで書いた覚えがあるけど、こいつらはプログラミング言語じゃないよね。。）</p>

<p>その時からずっと、<a href="en.wikipedia.org/wiki/Emacs">Emacs</a>を
使ってきました。<a href="en.wikipedia.org/wiki/Vi">Vi</a>とか、
<a href="en.wikipedia.org/wiki/Nano">Nano</a>とか、その他の<a href="http://en.wikipedia.org/wiki/Source_code_editor">IDE editor</a>
には<strong>絶対</strong>移りません。
大きな理由としては（宗教上の問題もあって）、小指はキーボードに手を置いた瞬間、自動的にCtrlキーに
移動するのです。（昔<a href="http://blog.counter-strike.net/">Counter Strike</a>）をずっとやってて、<code>小指はCtrl</code>
という癖は今までも消せない）</p>

<br/>


<br/>


<p><img class="center <a" src="href="http://www.theinternetpatrol.com/the-argument-ginger-maryann-emacs-vi-20090825-125314.jpg">http://www.theinternetpatrol.com/the-argument-ginger-maryann-emacs-vi-20090825-125314.jpg</a>" title="" ></p>

<p class="fig-title"></p>


<p style="text-align:center;">Emacs vs Vi, 引用: <a href="http://www.theinternetpatrol.com/">The Internet Patrol</a></p>

<!--more-->


<p><strong>関連するディスカッション</strong>: <a href="http://stackoverflow.com/questions/136056/ide-or-text-editor">IDE or Text Editor?</a></p>

<p>「Emacsを使う時は、プロジェクトの管理はやりにくい！」</p>

<p>という声はいっぱいあがるでしょう。</p>

<p>他のファイルを探すたんびに他のウィンドウを開けて、grepを実行して、そしてコンパイルをしたくて、
また他のウィンドウを開けて、コンパイルコマンドを呼び出して。。
こういう面倒な作業は、.emacsをいじってEmacs内で効率よくするために
関数を作ったりするのが一般的だと思います。</p>

<p>「そのための時間もない。。」</p>

<p>と僕も思ったので、このツールを見つけました。Emacs内で動くプロジェクト管理ツールです。
その名は、<a href="https://github.com/kiwanami/Emacs-window-manager">e2wm</a>。
Equilibrium Emacs Window Managerの略。</p>

<p>基本的には、5種類の開発モードが最初から定義されています:
<code>Code</code>、<code>Two</code>、<code>Doc</code>、<code>Dashboard</code>、と<code>Array</code>。それぞれのモードに異なるEmacsのプラグインが
ついています。例えばCodeモードだと<a href="www.emacswiki.org/Emacs/ImenuMode">imenu</a>と<a href="http://www.gnu.org/software/Emacs/manual/html_node/Emacs/List-Buffers.html">bufferlist</a>、
Arrayモードだと<a href="http://www.emacswiki.org/emacs/EmacsDoctor">doctor</a>。</p>

<p><img class="center" src="/images/dp-code.png" width="480" height="288" title="&lsquo;Code mode&rsquo;" ></p>

<p class="fig-title">e2wm: Codeモード</p>


<br/>


<p><img class="center" src="/images/dp-two.png" width="480" height="288" title="&lsquo;Two mode&rsquo;" ></p>

<p class="fig-title">e2wm: Twoモード</p>


<br/>


<p><img class="center" src="/images/dp-code-with-shell.png" width="480" height="288" title="&lsquo;Code mode with shell window&rsquo;" ></p>

<p class="fig-title">e2wm: Codeモード内でシェルウィンドウを開ける</p>


<br/>


<p>e2wmを使うには、Super簡単です。こちらのファイルをダウンロード：
* <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm-config.el">e2wm-config.el</a>
* <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm-vcs.el">e2wm-vcs.el</a>
* <a href="https://github.com/kiwanami/Emacs-window-manager/blob/master/e2wm.el">e2wm.el</a></p>

<p>そして、Emacsのパス(~/.emacs.d/)に上記のファイルを入れる。</p>

<p>最後に、<code>.emacs</code>に、以下のコードを挿入</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="nv">&amp;lsquo</span><span class="c1">;e2wm)</span>
</span><span class='line'><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="nv">&amp;ldquo</span><span class="c1">;M-+&amp;rdquo;) &#39;e2wm:start-management)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>完了！</p>

<p>e2wmを使うには、Emacsを開いたあとに,<code>C-+</code>で起動できます。</p>

<p>e2wmのgithubのプロジェクトは<a href="https://github.com/kiwanami/Emacs-window-manager">こちら</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[並列プログラミングの概念: CUDAとOpenCL]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/02/01/jp-introduction-to-parallel-programming/"/>
    <updated>2014-02-01T18:16:37+09:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/02/01/jp-introduction-to-parallel-programming</id>
    <content type="html"><![CDATA[<p>同じ機械、同じCPU、同じGPU、同じプログラミング言語で、</p>

<p><strong> 自分のプログラムがもっと高速に実行できること、見たくありませんか？ </strong></p>

<!--more-->


<p>最近、多くの並列プログラミングのフレームワークが登場してきている。
世界中のプログラマが、使いやすさの面をかんがえて、
Python、Ruby、Javascriptといったスクリプト言語
のラッパも開発されて、<a href="github.com">GitHub</a>とかに載ってたりします。</p>

<ul>
<li>Haskell: <a href="http://hackage.haskell.org/package/cuda">FFI binding to the CUDA interface for programming NVIDIA GPUs</a></li>
<li>Ruby: <a href="https://github.com/xman/sgc-ruby-cuda/blob/master/doc/devel.rdoc">SGC-Ruby-CUDA</a></li>
<li>Python: <a href="https://pypi.python.org/pypi/pyopencl">PyOpenCL</a></li>
</ul>


<p>未だに並列プログラミングを知りませんといった方々には、並列プログラミングをやって
始めませんか？</p>

<p>まず、NVIDIA社が開発した<a href="http://www.nvidia.com/content/devzone/index.html">CUDAアーキテクチャ</a>。
シンプルで使いやすいと思います。それに、CUDAのSDKに付いてくるサンプルの数も豊富にあります。
もちろん、サンプルといっても、初級のレベルから最上級までのレベルが用意されています。
ただ単純にCUDAのAPIの使い方だけではなく、並列プログラミングの手順まで教えてくれたり
するので、あらかじめ予習するのがお勧めです。</p>

<p>昔は、CUDAのアーキテクチャとSDKは（超）不便ではあったが、最新のやつだと間違いなく便利です。
例えば、昔のやつだと、カーネルは１つしか動作できなかったり、倍精度の計算はサポート
されなかったので単精度の組み合わせを使ってかなり遅かったり。サンプルも多くなかったし。
最近のやつは、サンプルも豊富だし、カーネル内のカーネル呼び出し（つまり、再帰的関数呼び出し）
が可能になりました。なんといっても、最近のCUDAのAPIとSDKは、使いやすいし便利です。
しかし、残念なことに、CUDAはNVIDIAのものなので、NVIDIAのGPUでしか動作できない。</p>

<p>FYI: 一般にはCPUがやっている計算を、GPUで計算させることは、<strong> GPGPU（GPUによる汎目的計算）</strong>と言います。</p>

<p>次は、<a href="http://www.khronos.org/opencl/">OpenCL</a>です。Open Computing Languageの略。
当初はAppleとKhronos Groupが開発を指揮っていましたが、最近では主にKhronos GroupがOpenCL開発を
リードしています。OpenCLを利用して嬉しいのは、多岐に渡るプラットフォームで動作することができる。
また、当初はC言語しかサポートされなかったが、OpenCL 1.1からC++も使えるようになりました。</p>

<p>NVIDIAのGPUや、IntelのCPU（とGPU両方、HD4000型以降）、AMDのGPU、ARMのCPUで動きます。
何故可能なんだ？これらのメーカーのプログラマの代表者が集まり、合同開発をしているからです。それぞれのメーカー
のチップが個性的な機能で作られているが、一つのAPIを通じて利用できるのが、素晴らしいと思いません？
それぞれのベンダーのOpenCLのSDKは<a href="http://developer.amd.com/sdks/AMDAPPSDK/Pages/default.aspx">AMD OpenCL SDK</a>,
<a href="http://software.intel.com/en-us/articles/vcsource-tools-opencl-sdk/">Intel OpenCL SDK</a>,
と<a href="https://developer.nvidia.com/opencl">NVIDIA OpenCL SDK</a>にあります。それぞれのOpenCLのSDKも
それぞれのベンダーが作成したサンプルも付いています。</p>

<p>上記２つは僕が主に利用したものです。もちろんこの他にも、多数あります。
無料・有料の観点で分けると、</p>

<p>フリー: <a href="http://openmp.org/wp/">OpenMP</a>, <a href="http://threadingbuildingblocks.org/">Intel&rsquo;s TBB</a>,
<a href="http://software.intel.com/en-us/articles/intel-array-building-blocks/">Intel&rsquo;s ArBB</a>,
<a href="https://computing.llnl.gov/tutorials/pthreads/">Pthreads</a></p>

<p>有料: <a href="http://www.pgroup.com/resources/accel.htm">PGI&rsquo;s Compiler with OpenACC</a>,
<a href="http://www.caps-entreprise.com/fr/page/index.php?id=148&amp;amp;p_p=36">CAPS' Compiler with OpenACC</a></p>

<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cygwin + ipython. Super便利.]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/01/22/jp-cygwin-ipython-perfection/"/>
    <updated>2014-01-22T14:27:00+09:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/01/22/jp-cygwin-ipython-perfection</id>
    <content type="html"><![CDATA[<p>僕はUNIXのプログラミング環境が好きです。ただ、なんかGNU/LinuxのGUIはピンとこないですね。
Windows 7のGUIの方が使いやすいし、見た目もいい感じだし。（慣れの問題かな..）</p>

<p>僕みたいな人にとっては、<a href="http://www.cygwin.com/">Cygwin</a>を使うと便利です。</p>

<!--more-->


<p>しかし、まーWindowsの環境とPOSIXスタイルの環境は大分異なるのが理由かもしれないけど、
たまにはツールとかソフトをインストールするには、Cygwinだと非常に時間がかかってしまう
時もあります。GNU/Linuxだと、<code>yum</code>とか<code>apt-get</code>という必殺技がデフォルトでパッケージに入って
便利だけど、Cygwinだと残念ながらデフォルトのパッケージにはない。。
(最近<a href="http://code.google.com/p/apt-cyg/">apt-cyg</a>というのを見つけてテンション上がったけど)</p>

<p>こないだCygwin上で<a href="ipython.org">ipython</a>+<a href="numpy.org">numpy</a>+<a href="scipy.org">scipy</a>+<a href="matplotlib.org">matplotlib</a>を使いたくてインストールしてみたところ、
土曜日丸一日使ってしまった。</p>

<p>僕の休日を返せ。と言いたかったけど、<code>ipython</code>+<code>numpy</code>+<code>scipy</code>+<code>matplotlib</code>の素晴らしさで落ち着けた。</p>

<p>ということで言いたかったのは、</p>

<p>Cygwin + Ipythonは、す・ば・ら・し・い。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初期化]]></title>
    <link href="http://ardiyu07.github.io/blog/2014/01/21/chu-qi-hua/"/>
    <updated>2014-01-21T18:17:40+09:00</updated>
    <id>http://ardiyu07.github.io/blog/2014/01/21/chu-qi-hua</id>
    <content type="html"><![CDATA[<p>テストポストです。無視してください。<i class='emoji smile'></i></p>
]]></content>
  </entry>
  
</feed>
